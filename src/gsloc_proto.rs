// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 27.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protos/location.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:Response.wifis)
    pub wifis: ::std::vec::Vec<response::ResponseWifi>,
    // special fields
    // @@protoc_insertion_point(special_field:Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "wifis",
            |m: &Response| { &m.wifis },
            |m: &mut Response| { &mut m.wifis },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.wifis.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.wifis {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.wifis {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.wifis.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            wifis: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Response`
pub mod response {
    // @@protoc_insertion_point(message:Response.ResponseWifi)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ResponseWifi {
        // message fields
        // @@protoc_insertion_point(field:Response.ResponseWifi.mac)
        pub mac: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:Response.ResponseWifi.location)
        pub location: ::protobuf::MessageField<response_wifi::WifiLocation>,
        // @@protoc_insertion_point(field:Response.ResponseWifi.channel)
        pub channel: ::std::option::Option<i32>,
        // special fields
        // @@protoc_insertion_point(special_field:Response.ResponseWifi.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ResponseWifi {
        fn default() -> &'a ResponseWifi {
            <ResponseWifi as ::protobuf::Message>::default_instance()
        }
    }

    impl ResponseWifi {
        pub fn new() -> ResponseWifi {
            ::std::default::Default::default()
        }

        // optional string mac = 1;

        pub fn mac(&self) -> &str {
            match self.mac.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_mac(&mut self) {
            self.mac = ::std::option::Option::None;
        }

        pub fn has_mac(&self) -> bool {
            self.mac.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mac(&mut self, v: ::std::string::String) {
            self.mac = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_mac(&mut self) -> &mut ::std::string::String {
            if self.mac.is_none() {
                self.mac = ::std::option::Option::Some(::std::string::String::new());
            }
            self.mac.as_mut().unwrap()
        }

        // Take field
        pub fn take_mac(&mut self) -> ::std::string::String {
            self.mac.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int32 channel = 21;

        pub fn channel(&self) -> i32 {
            self.channel.unwrap_or(0)
        }

        pub fn clear_channel(&mut self) {
            self.channel = ::std::option::Option::None;
        }

        pub fn has_channel(&self) -> bool {
            self.channel.is_some()
        }

        // Param is passed by value, moved
        pub fn set_channel(&mut self, v: i32) {
            self.channel = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(3);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "mac",
                |m: &ResponseWifi| { &m.mac },
                |m: &mut ResponseWifi| { &mut m.mac },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, response_wifi::WifiLocation>(
                "location",
                |m: &ResponseWifi| { &m.location },
                |m: &mut ResponseWifi| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "channel",
                |m: &ResponseWifi| { &m.channel },
                |m: &mut ResponseWifi| { &mut m.channel },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ResponseWifi>(
                "Response.ResponseWifi",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for ResponseWifi {
        const NAME: &'static str = "ResponseWifi";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.mac = ::std::option::Option::Some(is.read_string()?);
                    },
                    18 => {
                        ::protobuf::rt::read_singular_message_into_field(is, &mut self.location)?;
                    },
                    168 => {
                        self.channel = ::std::option::Option::Some(is.read_int32()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.mac.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.location.as_ref() {
                let len = v.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            }
            if let Some(v) = self.channel {
                my_size += ::protobuf::rt::int32_size(21, v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.mac.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.location.as_ref() {
                ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
            }
            if let Some(v) = self.channel {
                os.write_int32(21, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ResponseWifi {
            ResponseWifi::new()
        }

        fn clear(&mut self) {
            self.mac = ::std::option::Option::None;
            self.location.clear();
            self.channel = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ResponseWifi {
            static instance: ResponseWifi = ResponseWifi {
                mac: ::std::option::Option::None,
                location: ::protobuf::MessageField::none(),
                channel: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for ResponseWifi {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Response.ResponseWifi").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for ResponseWifi {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for ResponseWifi {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    /// Nested message and enums of message `ResponseWifi`
    pub mod response_wifi {
        // @@protoc_insertion_point(message:Response.ResponseWifi.WifiLocation)
        #[derive(PartialEq,Clone,Default,Debug)]
        pub struct WifiLocation {
            // message fields
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.latitude)
            pub latitude: ::std::option::Option<i64>,
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.longitude)
            pub longitude: ::std::option::Option<i64>,
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.accuracy)
            pub accuracy: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.zeroField4)
            pub zeroField4: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.altitude)
            pub altitude: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.altitudeAccuracy)
            pub altitudeAccuracy: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.unknown11)
            pub unknown11: ::std::option::Option<i32>,
            // @@protoc_insertion_point(field:Response.ResponseWifi.WifiLocation.unknown12)
            pub unknown12: ::std::option::Option<i32>,
            // special fields
            // @@protoc_insertion_point(special_field:Response.ResponseWifi.WifiLocation.special_fields)
            pub special_fields: ::protobuf::SpecialFields,
        }

        impl<'a> ::std::default::Default for &'a WifiLocation {
            fn default() -> &'a WifiLocation {
                <WifiLocation as ::protobuf::Message>::default_instance()
            }
        }

        impl WifiLocation {
            pub fn new() -> WifiLocation {
                ::std::default::Default::default()
            }

            // optional int64 latitude = 1;

            pub fn latitude(&self) -> i64 {
                self.latitude.unwrap_or(0)
            }

            pub fn clear_latitude(&mut self) {
                self.latitude = ::std::option::Option::None;
            }

            pub fn has_latitude(&self) -> bool {
                self.latitude.is_some()
            }

            // Param is passed by value, moved
            pub fn set_latitude(&mut self, v: i64) {
                self.latitude = ::std::option::Option::Some(v);
            }

            // optional int64 longitude = 2;

            pub fn longitude(&self) -> i64 {
                self.longitude.unwrap_or(0)
            }

            pub fn clear_longitude(&mut self) {
                self.longitude = ::std::option::Option::None;
            }

            pub fn has_longitude(&self) -> bool {
                self.longitude.is_some()
            }

            // Param is passed by value, moved
            pub fn set_longitude(&mut self, v: i64) {
                self.longitude = ::std::option::Option::Some(v);
            }

            // optional int32 accuracy = 3;

            pub fn accuracy(&self) -> i32 {
                self.accuracy.unwrap_or(0)
            }

            pub fn clear_accuracy(&mut self) {
                self.accuracy = ::std::option::Option::None;
            }

            pub fn has_accuracy(&self) -> bool {
                self.accuracy.is_some()
            }

            // Param is passed by value, moved
            pub fn set_accuracy(&mut self, v: i32) {
                self.accuracy = ::std::option::Option::Some(v);
            }

            // optional int32 zeroField4 = 4;

            pub fn zeroField4(&self) -> i32 {
                self.zeroField4.unwrap_or(0)
            }

            pub fn clear_zeroField4(&mut self) {
                self.zeroField4 = ::std::option::Option::None;
            }

            pub fn has_zeroField4(&self) -> bool {
                self.zeroField4.is_some()
            }

            // Param is passed by value, moved
            pub fn set_zeroField4(&mut self, v: i32) {
                self.zeroField4 = ::std::option::Option::Some(v);
            }

            // optional int32 altitude = 5;

            pub fn altitude(&self) -> i32 {
                self.altitude.unwrap_or(0)
            }

            pub fn clear_altitude(&mut self) {
                self.altitude = ::std::option::Option::None;
            }

            pub fn has_altitude(&self) -> bool {
                self.altitude.is_some()
            }

            // Param is passed by value, moved
            pub fn set_altitude(&mut self, v: i32) {
                self.altitude = ::std::option::Option::Some(v);
            }

            // optional int32 altitudeAccuracy = 6;

            pub fn altitudeAccuracy(&self) -> i32 {
                self.altitudeAccuracy.unwrap_or(0)
            }

            pub fn clear_altitudeAccuracy(&mut self) {
                self.altitudeAccuracy = ::std::option::Option::None;
            }

            pub fn has_altitudeAccuracy(&self) -> bool {
                self.altitudeAccuracy.is_some()
            }

            // Param is passed by value, moved
            pub fn set_altitudeAccuracy(&mut self, v: i32) {
                self.altitudeAccuracy = ::std::option::Option::Some(v);
            }

            // optional int32 unknown11 = 11;

            pub fn unknown11(&self) -> i32 {
                self.unknown11.unwrap_or(0)
            }

            pub fn clear_unknown11(&mut self) {
                self.unknown11 = ::std::option::Option::None;
            }

            pub fn has_unknown11(&self) -> bool {
                self.unknown11.is_some()
            }

            // Param is passed by value, moved
            pub fn set_unknown11(&mut self, v: i32) {
                self.unknown11 = ::std::option::Option::Some(v);
            }

            // optional int32 unknown12 = 12;

            pub fn unknown12(&self) -> i32 {
                self.unknown12.unwrap_or(0)
            }

            pub fn clear_unknown12(&mut self) {
                self.unknown12 = ::std::option::Option::None;
            }

            pub fn has_unknown12(&self) -> bool {
                self.unknown12.is_some()
            }

            // Param is passed by value, moved
            pub fn set_unknown12(&mut self, v: i32) {
                self.unknown12 = ::std::option::Option::Some(v);
            }

            pub(in super::super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
                let mut fields = ::std::vec::Vec::with_capacity(8);
                let mut oneofs = ::std::vec::Vec::with_capacity(0);
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "latitude",
                    |m: &WifiLocation| { &m.latitude },
                    |m: &mut WifiLocation| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "longitude",
                    |m: &WifiLocation| { &m.longitude },
                    |m: &mut WifiLocation| { &mut m.longitude },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "accuracy",
                    |m: &WifiLocation| { &m.accuracy },
                    |m: &mut WifiLocation| { &mut m.accuracy },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "zeroField4",
                    |m: &WifiLocation| { &m.zeroField4 },
                    |m: &mut WifiLocation| { &mut m.zeroField4 },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "altitude",
                    |m: &WifiLocation| { &m.altitude },
                    |m: &mut WifiLocation| { &mut m.altitude },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "altitudeAccuracy",
                    |m: &WifiLocation| { &m.altitudeAccuracy },
                    |m: &mut WifiLocation| { &mut m.altitudeAccuracy },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "unknown11",
                    |m: &WifiLocation| { &m.unknown11 },
                    |m: &mut WifiLocation| { &mut m.unknown11 },
                ));
                fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                    "unknown12",
                    |m: &WifiLocation| { &m.unknown12 },
                    |m: &mut WifiLocation| { &mut m.unknown12 },
                ));
                ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WifiLocation>(
                    "Response.ResponseWifi.WifiLocation",
                    fields,
                    oneofs,
                )
            }
        }

        impl ::protobuf::Message for WifiLocation {
            const NAME: &'static str = "WifiLocation";

            fn is_initialized(&self) -> bool {
                true
            }

            fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
                while let Some(tag) = is.read_raw_tag_or_eof()? {
                    match tag {
                        8 => {
                            self.latitude = ::std::option::Option::Some(is.read_int64()?);
                        },
                        16 => {
                            self.longitude = ::std::option::Option::Some(is.read_int64()?);
                        },
                        24 => {
                            self.accuracy = ::std::option::Option::Some(is.read_int32()?);
                        },
                        32 => {
                            self.zeroField4 = ::std::option::Option::Some(is.read_int32()?);
                        },
                        40 => {
                            self.altitude = ::std::option::Option::Some(is.read_int32()?);
                        },
                        48 => {
                            self.altitudeAccuracy = ::std::option::Option::Some(is.read_int32()?);
                        },
                        88 => {
                            self.unknown11 = ::std::option::Option::Some(is.read_int32()?);
                        },
                        96 => {
                            self.unknown12 = ::std::option::Option::Some(is.read_int32()?);
                        },
                        tag => {
                            ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                        },
                    };
                }
                ::std::result::Result::Ok(())
            }

            // Compute sizes of nested messages
            #[allow(unused_variables)]
            fn compute_size(&self) -> u64 {
                let mut my_size = 0;
                if let Some(v) = self.latitude {
                    my_size += ::protobuf::rt::int64_size(1, v);
                }
                if let Some(v) = self.longitude {
                    my_size += ::protobuf::rt::int64_size(2, v);
                }
                if let Some(v) = self.accuracy {
                    my_size += ::protobuf::rt::int32_size(3, v);
                }
                if let Some(v) = self.zeroField4 {
                    my_size += ::protobuf::rt::int32_size(4, v);
                }
                if let Some(v) = self.altitude {
                    my_size += ::protobuf::rt::int32_size(5, v);
                }
                if let Some(v) = self.altitudeAccuracy {
                    my_size += ::protobuf::rt::int32_size(6, v);
                }
                if let Some(v) = self.unknown11 {
                    my_size += ::protobuf::rt::int32_size(11, v);
                }
                if let Some(v) = self.unknown12 {
                    my_size += ::protobuf::rt::int32_size(12, v);
                }
                my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
                self.special_fields.cached_size().set(my_size as u32);
                my_size
            }

            fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
                if let Some(v) = self.latitude {
                    os.write_int64(1, v)?;
                }
                if let Some(v) = self.longitude {
                    os.write_int64(2, v)?;
                }
                if let Some(v) = self.accuracy {
                    os.write_int32(3, v)?;
                }
                if let Some(v) = self.zeroField4 {
                    os.write_int32(4, v)?;
                }
                if let Some(v) = self.altitude {
                    os.write_int32(5, v)?;
                }
                if let Some(v) = self.altitudeAccuracy {
                    os.write_int32(6, v)?;
                }
                if let Some(v) = self.unknown11 {
                    os.write_int32(11, v)?;
                }
                if let Some(v) = self.unknown12 {
                    os.write_int32(12, v)?;
                }
                os.write_unknown_fields(self.special_fields.unknown_fields())?;
                ::std::result::Result::Ok(())
            }

            fn special_fields(&self) -> &::protobuf::SpecialFields {
                &self.special_fields
            }

            fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
                &mut self.special_fields
            }

            fn new() -> WifiLocation {
                WifiLocation::new()
            }

            fn clear(&mut self) {
                self.latitude = ::std::option::Option::None;
                self.longitude = ::std::option::Option::None;
                self.accuracy = ::std::option::Option::None;
                self.zeroField4 = ::std::option::Option::None;
                self.altitude = ::std::option::Option::None;
                self.altitudeAccuracy = ::std::option::Option::None;
                self.unknown11 = ::std::option::Option::None;
                self.unknown12 = ::std::option::Option::None;
                self.special_fields.clear();
            }

            fn default_instance() -> &'static WifiLocation {
                static instance: WifiLocation = WifiLocation {
                    latitude: ::std::option::Option::None,
                    longitude: ::std::option::Option::None,
                    accuracy: ::std::option::Option::None,
                    zeroField4: ::std::option::Option::None,
                    altitude: ::std::option::Option::None,
                    altitudeAccuracy: ::std::option::Option::None,
                    unknown11: ::std::option::Option::None,
                    unknown12: ::std::option::Option::None,
                    special_fields: ::protobuf::SpecialFields::new(),
                };
                &instance
            }
        }

        impl ::protobuf::MessageFull for WifiLocation {
            fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
                static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
                descriptor.get(|| super::super::file_descriptor().message_by_package_relative_name("Response.ResponseWifi.WifiLocation").unwrap()).clone()
            }
        }

        impl ::std::fmt::Display for WifiLocation {
            fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                ::protobuf::text_format::fmt(self, f)
            }
        }

        impl ::protobuf::reflect::ProtobufValue for WifiLocation {
            type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
        }
    }
}

// @@protoc_insertion_point(message:Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:Request.wifis)
    pub wifis: ::std::vec::Vec<request::RequestWifi>,
    // @@protoc_insertion_point(field:Request.noise)
    pub noise: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Request.signal)
    pub signal: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:Request.source)
    pub source: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // optional int32 noise = 3;

    pub fn noise(&self) -> i32 {
        self.noise.unwrap_or(0i32)
    }

    pub fn clear_noise(&mut self) {
        self.noise = ::std::option::Option::None;
    }

    pub fn has_noise(&self) -> bool {
        self.noise.is_some()
    }

    // Param is passed by value, moved
    pub fn set_noise(&mut self, v: i32) {
        self.noise = ::std::option::Option::Some(v);
    }

    // optional int32 signal = 4;

    pub fn signal(&self) -> i32 {
        self.signal.unwrap_or(100i32)
    }

    pub fn clear_signal(&mut self) {
        self.signal = ::std::option::Option::None;
    }

    pub fn has_signal(&self) -> bool {
        self.signal.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signal(&mut self, v: i32) {
        self.signal = ::std::option::Option::Some(v);
    }

    // optional string source = 5;

    pub fn source(&self) -> &str {
        match self.source.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_source(&mut self) {
        self.source = ::std::option::Option::None;
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        if self.source.is_none() {
            self.source = ::std::option::Option::Some(::std::string::String::new());
        }
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        self.source.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "wifis",
            |m: &Request| { &m.wifis },
            |m: &mut Request| { &mut m.wifis },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "noise",
            |m: &Request| { &m.noise },
            |m: &mut Request| { &mut m.noise },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signal",
            |m: &Request| { &m.signal },
            |m: &mut Request| { &mut m.signal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "source",
            |m: &Request| { &m.source },
            |m: &mut Request| { &mut m.source },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.wifis.push(is.read_message()?);
                },
                24 => {
                    self.noise = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.signal = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.source = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.wifis {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.noise {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.signal {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.source.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.wifis {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.noise {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.signal {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.source.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.wifis.clear();
        self.noise = ::std::option::Option::None;
        self.signal = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            wifis: ::std::vec::Vec::new(),
            noise: ::std::option::Option::None,
            signal: ::std::option::Option::None,
            source: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Request`
pub mod request {
    // @@protoc_insertion_point(message:Request.RequestWifi)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct RequestWifi {
        // message fields
        // @@protoc_insertion_point(field:Request.RequestWifi.mac)
        pub mac: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:Request.RequestWifi.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a RequestWifi {
        fn default() -> &'a RequestWifi {
            <RequestWifi as ::protobuf::Message>::default_instance()
        }
    }

    impl RequestWifi {
        pub fn new() -> RequestWifi {
            ::std::default::Default::default()
        }

        // optional string mac = 1;

        pub fn mac(&self) -> &str {
            match self.mac.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_mac(&mut self) {
            self.mac = ::std::option::Option::None;
        }

        pub fn has_mac(&self) -> bool {
            self.mac.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mac(&mut self, v: ::std::string::String) {
            self.mac = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_mac(&mut self) -> &mut ::std::string::String {
            if self.mac.is_none() {
                self.mac = ::std::option::Option::Some(::std::string::String::new());
            }
            self.mac.as_mut().unwrap()
        }

        // Take field
        pub fn take_mac(&mut self) -> ::std::string::String {
            self.mac.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(1);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "mac",
                |m: &RequestWifi| { &m.mac },
                |m: &mut RequestWifi| { &mut m.mac },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequestWifi>(
                "Request.RequestWifi",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for RequestWifi {
        const NAME: &'static str = "RequestWifi";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.mac = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.mac.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.mac.as_ref() {
                os.write_string(1, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> RequestWifi {
            RequestWifi::new()
        }

        fn clear(&mut self) {
            self.mac = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static RequestWifi {
            static instance: RequestWifi = RequestWifi {
                mac: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for RequestWifi {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Request.RequestWifi").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for RequestWifi {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for RequestWifi {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15protos/location.proto\"\xc1\x03\n\x08Response\x12,\n\x05wifis\x18\
    \x02\x20\x03(\x0b2\x16.Response.ResponseWifiR\x05wifis\x1a\x86\x03\n\x0c\
    ResponseWifi\x12\x10\n\x03mac\x18\x01\x20\x01(\tR\x03mac\x12?\n\x08locat\
    ion\x18\x02\x20\x01(\x0b2#.Response.ResponseWifi.WifiLocationR\x08locati\
    on\x12\x18\n\x07channel\x18\x15\x20\x01(\x05R\x07channel\x1a\x88\x02\n\
    \x0cWifiLocation\x12\x1a\n\x08latitude\x18\x01\x20\x01(\x03R\x08latitude\
    \x12\x1c\n\tlongitude\x18\x02\x20\x01(\x03R\tlongitude\x12\x1a\n\x08accu\
    racy\x18\x03\x20\x01(\x05R\x08accuracy\x12\x1e\n\nzeroField4\x18\x04\x20\
    \x01(\x05R\nzeroField4\x12\x1a\n\x08altitude\x18\x05\x20\x01(\x05R\x08al\
    titude\x12*\n\x10altitudeAccuracy\x18\x06\x20\x01(\x05R\x10altitudeAccur\
    acy\x12\x1c\n\tunknown11\x18\x0b\x20\x01(\x05R\tunknown11\x12\x1c\n\tunk\
    nown12\x18\x0c\x20\x01(\x05R\tunknown12\"\xa4\x01\n\x07Request\x12*\n\
    \x05wifis\x18\x02\x20\x03(\x0b2\x14.Request.RequestWifiR\x05wifis\x12\
    \x17\n\x05noise\x18\x03\x20\x01(\x05:\x010R\x05noise\x12\x1b\n\x06signal\
    \x18\x04\x20\x01(\x05:\x03100R\x06signal\x12\x16\n\x06source\x18\x05\x20\
    \x01(\tR\x06source\x1a\x1f\n\x0bRequestWifi\x12\x10\n\x03mac\x18\x01\x20\
    \x01(\tR\x03mac\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(Response::generated_message_descriptor_data());
            messages.push(Request::generated_message_descriptor_data());
            messages.push(response::ResponseWifi::generated_message_descriptor_data());
            messages.push(response::response_wifi::WifiLocation::generated_message_descriptor_data());
            messages.push(request::RequestWifi::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
